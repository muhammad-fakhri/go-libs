// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go

// Package mock_cache is a generated GoMock package.
package mock_cache

import (
	cache "github.com/muhammad-fakhri/go-libs/cache"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockCacher is a mock of Cacher interface
type MockCacher struct {
	ctrl     *gomock.Controller
	recorder *MockCacherMockRecorder
}

// MockCacherMockRecorder is the mock recorder for MockCacher
type MockCacherMockRecorder struct {
	mock *MockCacher
}

// NewMockCacher creates a new mock instance
func NewMockCacher(ctrl *gomock.Controller) *MockCacher {
	mock := &MockCacher{ctrl: ctrl}
	mock.recorder = &MockCacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCacher) EXPECT() *MockCacherMockRecorder {
	return m.recorder
}

// GetConn mocks base method
func (m *MockCacher) GetConn() cache.Conn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConn")
	ret0, _ := ret[0].(cache.Conn)
	return ret0
}

// GetConn indicates an expected call of GetConn
func (mr *MockCacherMockRecorder) GetConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConn", reflect.TypeOf((*MockCacher)(nil).GetConn))
}

// Set mocks base method
func (m *MockCacher) Set(key, value string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockCacherMockRecorder) Set(key, value, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCacher)(nil).Set), key, value, ttl)
}

// Get mocks base method
func (m *MockCacher) Get(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockCacherMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacher)(nil).Get), key)
}

// Del mocks base method
func (m *MockCacher) Del(key ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range key {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Del", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del
func (mr *MockCacherMockRecorder) Del(key ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockCacher)(nil).Del), key...)
}

// ErrorOnCacheMiss mocks base method
func (m *MockCacher) ErrorOnCacheMiss() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErrorOnCacheMiss")
	ret0, _ := ret[0].(error)
	return ret0
}

// ErrorOnCacheMiss indicates an expected call of ErrorOnCacheMiss
func (mr *MockCacherMockRecorder) ErrorOnCacheMiss() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorOnCacheMiss", reflect.TypeOf((*MockCacher)(nil).ErrorOnCacheMiss))
}

// MockConn is a mock of Conn interface
type MockConn struct {
	ctrl     *gomock.Controller
	recorder *MockConnMockRecorder
}

// MockConnMockRecorder is the mock recorder for MockConn
type MockConnMockRecorder struct {
	mock *MockConn
}

// NewMockConn creates a new mock instance
func NewMockConn(ctrl *gomock.Controller) *MockConn {
	mock := &MockConn{ctrl: ctrl}
	mock.recorder = &MockConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConn) EXPECT() *MockConnMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConn)(nil).Close))
}

// Err mocks base method
func (m *MockConn) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockConnMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockConn)(nil).Err))
}

// Do mocks base method
func (m *MockConn) Do(commandName string, args ...interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{commandName}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockConnMockRecorder) Do(commandName interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{commandName}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockConn)(nil).Do), varargs...)
}

// Send mocks base method
func (m *MockConn) Send(commandName string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{commandName}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Send", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockConnMockRecorder) Send(commandName interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{commandName}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockConn)(nil).Send), varargs...)
}

// Flush mocks base method
func (m *MockConn) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush
func (mr *MockConnMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockConn)(nil).Flush))
}

// Receive mocks base method
func (m *MockConn) Receive() (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Receive indicates an expected call of Receive
func (mr *MockConnMockRecorder) Receive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockConn)(nil).Receive))
}

// MockHashCacher is a mock of HashCacher interface
type MockHashCacher struct {
	ctrl     *gomock.Controller
	recorder *MockHashCacherMockRecorder
}

// MockHashCacherMockRecorder is the mock recorder for MockHashCacher
type MockHashCacherMockRecorder struct {
	mock *MockHashCacher
}

// NewMockHashCacher creates a new mock instance
func NewMockHashCacher(ctrl *gomock.Controller) *MockHashCacher {
	mock := &MockHashCacher{ctrl: ctrl}
	mock.recorder = &MockHashCacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHashCacher) EXPECT() *MockHashCacherMockRecorder {
	return m.recorder
}

// HSet mocks base method
func (m *MockHashCacher) HSet(key, field, value string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HSet", key, field, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// HSet indicates an expected call of HSet
func (mr *MockHashCacherMockRecorder) HSet(key, field, value, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HSet", reflect.TypeOf((*MockHashCacher)(nil).HSet), key, field, value, ttl)
}

// HSetNX mocks base method
func (m *MockHashCacher) HSetNX(key, field, value string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HSetNX", key, field, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// HSetNX indicates an expected call of HSetNX
func (mr *MockHashCacherMockRecorder) HSetNX(key, field, value, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HSetNX", reflect.TypeOf((*MockHashCacher)(nil).HSetNX), key, field, value, ttl)
}

// HMSet mocks base method
func (m *MockHashCacher) HMSet(key string, fieldsMap map[string]string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HMSet", key, fieldsMap, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// HMSet indicates an expected call of HMSet
func (mr *MockHashCacherMockRecorder) HMSet(key, fieldsMap, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HMSet", reflect.TypeOf((*MockHashCacher)(nil).HMSet), key, fieldsMap, ttl)
}

// HGet mocks base method
func (m *MockHashCacher) HGet(key, field string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HGet", key, field)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HGet indicates an expected call of HGet
func (mr *MockHashCacherMockRecorder) HGet(key, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGet", reflect.TypeOf((*MockHashCacher)(nil).HGet), key, field)
}

// HMGet mocks base method
func (m *MockHashCacher) HMGet(key string, fields ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HMGet", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HMGet indicates an expected call of HMGet
func (mr *MockHashCacherMockRecorder) HMGet(key interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HMGet", reflect.TypeOf((*MockHashCacher)(nil).HMGet), varargs...)
}

// HDel mocks base method
func (m *MockHashCacher) HDel(key string, fields ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HDel", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HDel indicates an expected call of HDel
func (mr *MockHashCacherMockRecorder) HDel(key interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HDel", reflect.TypeOf((*MockHashCacher)(nil).HDel), varargs...)
}

// HKeys mocks base method
func (m *MockHashCacher) HKeys(key string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HKeys", key)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HKeys indicates an expected call of HKeys
func (mr *MockHashCacherMockRecorder) HKeys(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HKeys", reflect.TypeOf((*MockHashCacher)(nil).HKeys), key)
}

// HVals mocks base method
func (m *MockHashCacher) HVals(key string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HVals", key)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HVals indicates an expected call of HVals
func (mr *MockHashCacherMockRecorder) HVals(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HVals", reflect.TypeOf((*MockHashCacher)(nil).HVals), key)
}

// HGetAll mocks base method
func (m *MockHashCacher) HGetAll(key string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HGetAll", key)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HGetAll indicates an expected call of HGetAll
func (mr *MockHashCacherMockRecorder) HGetAll(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGetAll", reflect.TypeOf((*MockHashCacher)(nil).HGetAll), key)
}

// HExists mocks base method
func (m *MockHashCacher) HExists(key, field string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HExists", key, field)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HExists indicates an expected call of HExists
func (mr *MockHashCacherMockRecorder) HExists(key, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HExists", reflect.TypeOf((*MockHashCacher)(nil).HExists), key, field)
}

// HIncrBy mocks base method
func (m *MockHashCacher) HIncrBy(key, field string, incrValue int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HIncrBy", key, field, incrValue)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HIncrBy indicates an expected call of HIncrBy
func (mr *MockHashCacherMockRecorder) HIncrBy(key, field, incrValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HIncrBy", reflect.TypeOf((*MockHashCacher)(nil).HIncrBy), key, field, incrValue)
}

// ErrorOnHashCacheMiss mocks base method
func (m *MockHashCacher) ErrorOnHashCacheMiss() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErrorOnHashCacheMiss")
	ret0, _ := ret[0].(error)
	return ret0
}

// ErrorOnHashCacheMiss indicates an expected call of ErrorOnHashCacheMiss
func (mr *MockHashCacherMockRecorder) ErrorOnHashCacheMiss() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorOnHashCacheMiss", reflect.TypeOf((*MockHashCacher)(nil).ErrorOnHashCacheMiss))
}

// MockMultiCacher is a mock of MultiCacher interface
type MockMultiCacher struct {
	ctrl     *gomock.Controller
	recorder *MockMultiCacherMockRecorder
}

// MockMultiCacherMockRecorder is the mock recorder for MockMultiCacher
type MockMultiCacherMockRecorder struct {
	mock *MockMultiCacher
}

// NewMockMultiCacher creates a new mock instance
func NewMockMultiCacher(ctrl *gomock.Controller) *MockMultiCacher {
	mock := &MockMultiCacher{ctrl: ctrl}
	mock.recorder = &MockMultiCacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMultiCacher) EXPECT() *MockMultiCacherMockRecorder {
	return m.recorder
}

// MSet mocks base method
func (m *MockMultiCacher) MSet(values map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MSet", values)
	ret0, _ := ret[0].(error)
	return ret0
}

// MSet indicates an expected call of MSet
func (mr *MockMultiCacherMockRecorder) MSet(values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MSet", reflect.TypeOf((*MockMultiCacher)(nil).MSet), values)
}

// MSetEx mocks base method
func (m *MockMultiCacher) MSetEx(values map[string]string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MSetEx", values, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// MSetEx indicates an expected call of MSetEx
func (mr *MockMultiCacherMockRecorder) MSetEx(values, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MSetEx", reflect.TypeOf((*MockMultiCacher)(nil).MSetEx), values, ttl)
}

// MGet mocks base method
func (m *MockMultiCacher) MGet(keys []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGet", keys)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGet indicates an expected call of MGet
func (mr *MockMultiCacherMockRecorder) MGet(keys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGet", reflect.TypeOf((*MockMultiCacher)(nil).MGet), keys)
}

// MockCache is a mock of Cache interface
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// GetConn mocks base method
func (m *MockCache) GetConn() cache.Conn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConn")
	ret0, _ := ret[0].(cache.Conn)
	return ret0
}

// GetConn indicates an expected call of GetConn
func (mr *MockCacheMockRecorder) GetConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConn", reflect.TypeOf((*MockCache)(nil).GetConn))
}

// Set mocks base method
func (m *MockCache) Set(key, value string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockCacheMockRecorder) Set(key, value, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCache)(nil).Set), key, value, ttl)
}

// Get mocks base method
func (m *MockCache) Get(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockCacheMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), key)
}

// Del mocks base method
func (m *MockCache) Del(key ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range key {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Del", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del
func (mr *MockCacheMockRecorder) Del(key ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockCache)(nil).Del), key...)
}

// ErrorOnCacheMiss mocks base method
func (m *MockCache) ErrorOnCacheMiss() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErrorOnCacheMiss")
	ret0, _ := ret[0].(error)
	return ret0
}

// ErrorOnCacheMiss indicates an expected call of ErrorOnCacheMiss
func (mr *MockCacheMockRecorder) ErrorOnCacheMiss() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorOnCacheMiss", reflect.TypeOf((*MockCache)(nil).ErrorOnCacheMiss))
}

// HSet mocks base method
func (m *MockCache) HSet(key, field, value string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HSet", key, field, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// HSet indicates an expected call of HSet
func (mr *MockCacheMockRecorder) HSet(key, field, value, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HSet", reflect.TypeOf((*MockCache)(nil).HSet), key, field, value, ttl)
}

// HSetNX mocks base method
func (m *MockCache) HSetNX(key, field, value string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HSetNX", key, field, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// HSetNX indicates an expected call of HSetNX
func (mr *MockCacheMockRecorder) HSetNX(key, field, value, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HSetNX", reflect.TypeOf((*MockCache)(nil).HSetNX), key, field, value, ttl)
}

// HMSet mocks base method
func (m *MockCache) HMSet(key string, fieldsMap map[string]string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HMSet", key, fieldsMap, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// HMSet indicates an expected call of HMSet
func (mr *MockCacheMockRecorder) HMSet(key, fieldsMap, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HMSet", reflect.TypeOf((*MockCache)(nil).HMSet), key, fieldsMap, ttl)
}

// HGet mocks base method
func (m *MockCache) HGet(key, field string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HGet", key, field)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HGet indicates an expected call of HGet
func (mr *MockCacheMockRecorder) HGet(key, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGet", reflect.TypeOf((*MockCache)(nil).HGet), key, field)
}

// HMGet mocks base method
func (m *MockCache) HMGet(key string, fields ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HMGet", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HMGet indicates an expected call of HMGet
func (mr *MockCacheMockRecorder) HMGet(key interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HMGet", reflect.TypeOf((*MockCache)(nil).HMGet), varargs...)
}

// HDel mocks base method
func (m *MockCache) HDel(key string, fields ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HDel", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HDel indicates an expected call of HDel
func (mr *MockCacheMockRecorder) HDel(key interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HDel", reflect.TypeOf((*MockCache)(nil).HDel), varargs...)
}

// HKeys mocks base method
func (m *MockCache) HKeys(key string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HKeys", key)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HKeys indicates an expected call of HKeys
func (mr *MockCacheMockRecorder) HKeys(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HKeys", reflect.TypeOf((*MockCache)(nil).HKeys), key)
}

// HVals mocks base method
func (m *MockCache) HVals(key string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HVals", key)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HVals indicates an expected call of HVals
func (mr *MockCacheMockRecorder) HVals(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HVals", reflect.TypeOf((*MockCache)(nil).HVals), key)
}

// HGetAll mocks base method
func (m *MockCache) HGetAll(key string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HGetAll", key)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HGetAll indicates an expected call of HGetAll
func (mr *MockCacheMockRecorder) HGetAll(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGetAll", reflect.TypeOf((*MockCache)(nil).HGetAll), key)
}

// HExists mocks base method
func (m *MockCache) HExists(key, field string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HExists", key, field)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HExists indicates an expected call of HExists
func (mr *MockCacheMockRecorder) HExists(key, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HExists", reflect.TypeOf((*MockCache)(nil).HExists), key, field)
}

// HIncrBy mocks base method
func (m *MockCache) HIncrBy(key, field string, incrValue int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HIncrBy", key, field, incrValue)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HIncrBy indicates an expected call of HIncrBy
func (mr *MockCacheMockRecorder) HIncrBy(key, field, incrValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HIncrBy", reflect.TypeOf((*MockCache)(nil).HIncrBy), key, field, incrValue)
}

// ErrorOnHashCacheMiss mocks base method
func (m *MockCache) ErrorOnHashCacheMiss() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErrorOnHashCacheMiss")
	ret0, _ := ret[0].(error)
	return ret0
}

// ErrorOnHashCacheMiss indicates an expected call of ErrorOnHashCacheMiss
func (mr *MockCacheMockRecorder) ErrorOnHashCacheMiss() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorOnHashCacheMiss", reflect.TypeOf((*MockCache)(nil).ErrorOnHashCacheMiss))
}

// IncrXX mocks base method
func (m *MockCache) IncrXX(key string, value int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrXX", key, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrXX indicates an expected call of IncrXX
func (mr *MockCacheMockRecorder) IncrXX(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrXX", reflect.TypeOf((*MockCache)(nil).IncrXX), key, value)
}

// DecrWithLimit mocks base method
func (m *MockCache) DecrWithLimit(key string, value, lowerBound int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrWithLimit", key, value, lowerBound)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecrWithLimit indicates an expected call of DecrWithLimit
func (mr *MockCacheMockRecorder) DecrWithLimit(key, value, lowerBound interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrWithLimit", reflect.TypeOf((*MockCache)(nil).DecrWithLimit), key, value, lowerBound)
}

// HGetSet mocks base method
func (m *MockCache) HGetSet(key, field, value, prevValue string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HGetSet", key, field, value, prevValue, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// HGetSet indicates an expected call of HGetSet
func (mr *MockCacheMockRecorder) HGetSet(key, field, value, prevValue, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGetSet", reflect.TypeOf((*MockCache)(nil).HGetSet), key, field, value, prevValue, ttl)
}

// ZAddToFixed mocks base method
func (m *MockCache) ZAddToFixed(key, member string, score, maxSize int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZAddToFixed", key, member, score, maxSize)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZAddToFixed indicates an expected call of ZAddToFixed
func (mr *MockCacheMockRecorder) ZAddToFixed(key, member, score, maxSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddToFixed", reflect.TypeOf((*MockCache)(nil).ZAddToFixed), key, member, score, maxSize)
}

// MSet mocks base method
func (m *MockCache) MSet(values map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MSet", values)
	ret0, _ := ret[0].(error)
	return ret0
}

// MSet indicates an expected call of MSet
func (mr *MockCacheMockRecorder) MSet(values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MSet", reflect.TypeOf((*MockCache)(nil).MSet), values)
}

// MSetEx mocks base method
func (m *MockCache) MSetEx(values map[string]string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MSetEx", values, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// MSetEx indicates an expected call of MSetEx
func (mr *MockCacheMockRecorder) MSetEx(values, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MSetEx", reflect.TypeOf((*MockCache)(nil).MSetEx), values, ttl)
}

// MGet mocks base method
func (m *MockCache) MGet(keys []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGet", keys)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGet indicates an expected call of MGet
func (mr *MockCacheMockRecorder) MGet(keys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGet", reflect.TypeOf((*MockCache)(nil).MGet), keys)
}

// SetNX mocks base method
func (m *MockCache) SetNX(key, value string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNX", key, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNX indicates an expected call of SetNX
func (mr *MockCacheMockRecorder) SetNX(key, value, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNX", reflect.TypeOf((*MockCache)(nil).SetNX), key, value, ttl)
}

// ScanKeys mocks base method
func (m *MockCache) ScanKeys(pattern string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanKeys", pattern)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanKeys indicates an expected call of ScanKeys
func (mr *MockCacheMockRecorder) ScanKeys(pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanKeys", reflect.TypeOf((*MockCache)(nil).ScanKeys), pattern)
}

// IncrBy mocks base method
func (m *MockCache) IncrBy(key string, incr int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrBy", key, incr)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrBy indicates an expected call of IncrBy
func (mr *MockCacheMockRecorder) IncrBy(key, incr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrBy", reflect.TypeOf((*MockCache)(nil).IncrBy), key, incr)
}

// ZAdd mocks base method
func (m *MockCache) ZAdd(key, member string, score int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZAdd", key, member, score)
	ret0, _ := ret[0].(error)
	return ret0
}

// ZAdd indicates an expected call of ZAdd
func (mr *MockCacheMockRecorder) ZAdd(key, member, score interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAdd", reflect.TypeOf((*MockCache)(nil).ZAdd), key, member, score)
}

// ZAddXX mocks base method
func (m *MockCache) ZAddXX(key, member string, score int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZAddXX", key, member, score)
	ret0, _ := ret[0].(error)
	return ret0
}

// ZAddXX indicates an expected call of ZAddXX
func (mr *MockCacheMockRecorder) ZAddXX(key, member, score interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddXX", reflect.TypeOf((*MockCache)(nil).ZAddXX), key, member, score)
}

// ZAddNX mocks base method
func (m *MockCache) ZAddNX(key, member string, score int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZAddNX", key, member, score)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZAddNX indicates an expected call of ZAddNX
func (mr *MockCacheMockRecorder) ZAddNX(key, member, score interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddNX", reflect.TypeOf((*MockCache)(nil).ZAddNX), key, member, score)
}

// ZAddINCR mocks base method
func (m *MockCache) ZAddINCR(key, member string, score int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZAddINCR", key, member, score)
	ret0, _ := ret[0].(error)
	return ret0
}

// ZAddINCR indicates an expected call of ZAddINCR
func (mr *MockCacheMockRecorder) ZAddINCR(key, member, score interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddINCR", reflect.TypeOf((*MockCache)(nil).ZAddINCR), key, member, score)
}

// ZCard mocks base method
func (m *MockCache) ZCard(key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZCard", key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZCard indicates an expected call of ZCard
func (mr *MockCacheMockRecorder) ZCard(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZCard", reflect.TypeOf((*MockCache)(nil).ZCard), key)
}

// ZRange mocks base method
func (m *MockCache) ZRange(key string, start, stop int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRange", key, start, stop)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRange indicates an expected call of ZRange
func (mr *MockCacheMockRecorder) ZRange(key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRange", reflect.TypeOf((*MockCache)(nil).ZRange), key, start, stop)
}

// ZRevRange mocks base method
func (m *MockCache) ZRevRange(key string, start, stop int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRange", key, start, stop)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRevRange indicates an expected call of ZRevRange
func (mr *MockCacheMockRecorder) ZRevRange(key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRange", reflect.TypeOf((*MockCache)(nil).ZRevRange), key, start, stop)
}

// ZRangeByScore mocks base method
func (m *MockCache) ZRangeByScore(key string, min, max, offset, count int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRangeByScore", key, min, max, offset, count)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRangeByScore indicates an expected call of ZRangeByScore
func (mr *MockCacheMockRecorder) ZRangeByScore(key, min, max, offset, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRangeByScore", reflect.TypeOf((*MockCache)(nil).ZRangeByScore), key, min, max, offset, count)
}

// ZRevRangeByScore mocks base method
func (m *MockCache) ZRevRangeByScore(key string, max, min, offset, count int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRangeByScore", key, max, min, offset, count)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRevRangeByScore indicates an expected call of ZRevRangeByScore
func (mr *MockCacheMockRecorder) ZRevRangeByScore(key, max, min, offset, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRangeByScore", reflect.TypeOf((*MockCache)(nil).ZRevRangeByScore), key, max, min, offset, count)
}

// ZRank mocks base method
func (m *MockCache) ZRank(key, member string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRank", key, member)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRank indicates an expected call of ZRank
func (mr *MockCacheMockRecorder) ZRank(key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRank", reflect.TypeOf((*MockCache)(nil).ZRank), key, member)
}

// ZRevRank mocks base method
func (m *MockCache) ZRevRank(key, member string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRank", key, member)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRevRank indicates an expected call of ZRevRank
func (mr *MockCacheMockRecorder) ZRevRank(key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRank", reflect.TypeOf((*MockCache)(nil).ZRevRank), key, member)
}

// ZScore mocks base method
func (m *MockCache) ZScore(key, member string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZScore", key, member)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZScore indicates an expected call of ZScore
func (mr *MockCacheMockRecorder) ZScore(key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZScore", reflect.TypeOf((*MockCache)(nil).ZScore), key, member)
}

// ZCount mocks base method
func (m *MockCache) ZCount(key string, min, max int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZCount", key, min, max)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZCount indicates an expected call of ZCount
func (mr *MockCacheMockRecorder) ZCount(key, min, max interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZCount", reflect.TypeOf((*MockCache)(nil).ZCount), key, min, max)
}

// ZRemRangeByScore mocks base method
func (m *MockCache) ZRemRangeByScore(key string, start, stop int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRemRangeByScore", key, start, stop)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRemRangeByScore indicates an expected call of ZRemRangeByScore
func (mr *MockCacheMockRecorder) ZRemRangeByScore(key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRemRangeByScore", reflect.TypeOf((*MockCache)(nil).ZRemRangeByScore), key, start, stop)
}

// SAdd mocks base method
func (m *MockCache) SAdd(key, member string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SAdd", key, member)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SAdd indicates an expected call of SAdd
func (mr *MockCacheMockRecorder) SAdd(key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SAdd", reflect.TypeOf((*MockCache)(nil).SAdd), key, member)
}

// SCard mocks base method
func (m *MockCache) SCard(key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SCard", key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SCard indicates an expected call of SCard
func (mr *MockCacheMockRecorder) SCard(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SCard", reflect.TypeOf((*MockCache)(nil).SCard), key)
}

// SDiff mocks base method
func (m *MockCache) SDiff(keys ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SDiff", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SDiff indicates an expected call of SDiff
func (mr *MockCacheMockRecorder) SDiff(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SDiff", reflect.TypeOf((*MockCache)(nil).SDiff), keys...)
}

// SDiffStore mocks base method
func (m *MockCache) SDiffStore(keys ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SDiffStore", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SDiffStore indicates an expected call of SDiffStore
func (mr *MockCacheMockRecorder) SDiffStore(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SDiffStore", reflect.TypeOf((*MockCache)(nil).SDiffStore), keys...)
}

// SInter mocks base method
func (m *MockCache) SInter(keys ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SInter", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SInter indicates an expected call of SInter
func (mr *MockCacheMockRecorder) SInter(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SInter", reflect.TypeOf((*MockCache)(nil).SInter), keys...)
}

// SInterStore mocks base method
func (m *MockCache) SInterStore(keys ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SInterStore", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SInterStore indicates an expected call of SInterStore
func (mr *MockCacheMockRecorder) SInterStore(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SInterStore", reflect.TypeOf((*MockCache)(nil).SInterStore), keys...)
}

// SIsMember mocks base method
func (m *MockCache) SIsMember(keys, member string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SIsMember", keys, member)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SIsMember indicates an expected call of SIsMember
func (mr *MockCacheMockRecorder) SIsMember(keys, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SIsMember", reflect.TypeOf((*MockCache)(nil).SIsMember), keys, member)
}

// SMembers mocks base method
func (m *MockCache) SMembers(key string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMembers", key)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SMembers indicates an expected call of SMembers
func (mr *MockCacheMockRecorder) SMembers(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMembers", reflect.TypeOf((*MockCache)(nil).SMembers), key)
}

// SMove mocks base method
func (m *MockCache) SMove(value, source, destination string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMove", value, source, destination)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SMove indicates an expected call of SMove
func (mr *MockCacheMockRecorder) SMove(value, source, destination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMove", reflect.TypeOf((*MockCache)(nil).SMove), value, source, destination)
}

// SPop mocks base method
func (m *MockCache) SPop(key string, count int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SPop", key, count)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SPop indicates an expected call of SPop
func (mr *MockCacheMockRecorder) SPop(key, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SPop", reflect.TypeOf((*MockCache)(nil).SPop), key, count)
}

// SRandMember mocks base method
func (m *MockCache) SRandMember(key string, count int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SRandMember", key, count)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SRandMember indicates an expected call of SRandMember
func (mr *MockCacheMockRecorder) SRandMember(key, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SRandMember", reflect.TypeOf((*MockCache)(nil).SRandMember), key, count)
}

// SRem mocks base method
func (m *MockCache) SRem(key, member string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SRem", key, member)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SRem indicates an expected call of SRem
func (mr *MockCacheMockRecorder) SRem(key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SRem", reflect.TypeOf((*MockCache)(nil).SRem), key, member)
}

// SUnion mocks base method
func (m *MockCache) SUnion(keys ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SUnion", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SUnion indicates an expected call of SUnion
func (mr *MockCacheMockRecorder) SUnion(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SUnion", reflect.TypeOf((*MockCache)(nil).SUnion), keys...)
}

// SUnionStore mocks base method
func (m *MockCache) SUnionStore(keys ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SUnionStore", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SUnionStore indicates an expected call of SUnionStore
func (mr *MockCacheMockRecorder) SUnionStore(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SUnionStore", reflect.TypeOf((*MockCache)(nil).SUnionStore), keys...)
}

// ZRem mocks base method
func (m *MockCache) ZRem(key string, members ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZRem", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRem indicates an expected call of ZRem
func (mr *MockCacheMockRecorder) ZRem(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRem", reflect.TypeOf((*MockCache)(nil).ZRem), varargs...)
}

// ZAddXXIncrBy mocks base method
func (m *MockCache) ZAddXXIncrBy(key, member string, incrValue int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZAddXXIncrBy", key, member, incrValue)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZAddXXIncrBy indicates an expected call of ZAddXXIncrBy
func (mr *MockCacheMockRecorder) ZAddXXIncrBy(key, member, incrValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddXXIncrBy", reflect.TypeOf((*MockCache)(nil).ZAddXXIncrBy), key, member, incrValue)
}

// Expire mocks base method
func (m *MockCache) Expire(key string, ttl time.Duration) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expire", key, ttl)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Expire indicates an expected call of Expire
func (mr *MockCacheMockRecorder) Expire(key, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expire", reflect.TypeOf((*MockCache)(nil).Expire), key, ttl)
}

// Exists mocks base method
func (m *MockCache) Exists(key string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockCacheMockRecorder) Exists(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockCache)(nil).Exists), key)
}

// ZRevRangeWithScore mocks base method
func (m *MockCache) ZRevRangeWithScore(key string, start, stop int64) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRangeWithScore", key, start, stop)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRevRangeWithScore indicates an expected call of ZRevRangeWithScore
func (mr *MockCacheMockRecorder) ZRevRangeWithScore(key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRangeWithScore", reflect.TypeOf((*MockCache)(nil).ZRevRangeWithScore), key, start, stop)
}

// GeoAdd mocks base method
func (m *MockCache) GeoAdd(key string, geos ...*cache.GeoPoint) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range geos {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GeoAdd", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeoAdd indicates an expected call of GeoAdd
func (mr *MockCacheMockRecorder) GeoAdd(key interface{}, geos ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, geos...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoAdd", reflect.TypeOf((*MockCache)(nil).GeoAdd), varargs...)
}

// GeoHash mocks base method
func (m *MockCache) GeoHash(key string, members ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GeoHash", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeoHash indicates an expected call of GeoHash
func (mr *MockCacheMockRecorder) GeoHash(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoHash", reflect.TypeOf((*MockCache)(nil).GeoHash), varargs...)
}

// GeoRadius mocks base method
func (m *MockCache) GeoRadius(key string, long, lat float64, q *cache.GeoRadiusQuery) ([]*cache.GeoLoc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoRadius", key, long, lat, q)
	ret0, _ := ret[0].([]*cache.GeoLoc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeoRadius indicates an expected call of GeoRadius
func (mr *MockCacheMockRecorder) GeoRadius(key, long, lat, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoRadius", reflect.TypeOf((*MockCache)(nil).GeoRadius), key, long, lat, q)
}

// TTL mocks base method
func (m *MockCache) TTL(key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TTL", key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TTL indicates an expected call of TTL
func (mr *MockCacheMockRecorder) TTL(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TTL", reflect.TypeOf((*MockCache)(nil).TTL), key)
}

// LLen mocks base method
func (m *MockCache) LLen(key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LLen", key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LLen indicates an expected call of LLen
func (mr *MockCacheMockRecorder) LLen(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LLen", reflect.TypeOf((*MockCache)(nil).LLen), key)
}

// LPop mocks base method
func (m *MockCache) LPop(key string, count int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LPop", key, count)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LPop indicates an expected call of LPop
func (mr *MockCacheMockRecorder) LPop(key, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPop", reflect.TypeOf((*MockCache)(nil).LPop), key, count)
}

// LPush mocks base method
func (m *MockCache) LPush(key string, values []string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LPush", key, values)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LPush indicates an expected call of LPush
func (mr *MockCacheMockRecorder) LPush(key, values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPush", reflect.TypeOf((*MockCache)(nil).LPush), key, values)
}

// LPushX mocks base method
func (m *MockCache) LPushX(key string, values []string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LPushX", key, values)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LPushX indicates an expected call of LPushX
func (mr *MockCacheMockRecorder) LPushX(key, values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPushX", reflect.TypeOf((*MockCache)(nil).LPushX), key, values)
}

// RPop mocks base method
func (m *MockCache) RPop(key string, count int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPop", key, count)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RPop indicates an expected call of RPop
func (mr *MockCacheMockRecorder) RPop(key, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPop", reflect.TypeOf((*MockCache)(nil).RPop), key, count)
}

// RPush mocks base method
func (m *MockCache) RPush(key string, values []string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPush", key, values)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RPush indicates an expected call of RPush
func (mr *MockCacheMockRecorder) RPush(key, values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPush", reflect.TypeOf((*MockCache)(nil).RPush), key, values)
}

// RPushX mocks base method
func (m *MockCache) RPushX(key string, values []string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPushX", key, values)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RPushX indicates an expected call of RPushX
func (mr *MockCacheMockRecorder) RPushX(key, values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPushX", reflect.TypeOf((*MockCache)(nil).RPushX), key, values)
}

// MockScripter is a mock of Scripter interface
type MockScripter struct {
	ctrl     *gomock.Controller
	recorder *MockScripterMockRecorder
}

// MockScripterMockRecorder is the mock recorder for MockScripter
type MockScripterMockRecorder struct {
	mock *MockScripter
}

// NewMockScripter creates a new mock instance
func NewMockScripter(ctrl *gomock.Controller) *MockScripter {
	mock := &MockScripter{ctrl: ctrl}
	mock.recorder = &MockScripterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScripter) EXPECT() *MockScripterMockRecorder {
	return m.recorder
}

// IncrXX mocks base method
func (m *MockScripter) IncrXX(key string, value int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrXX", key, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrXX indicates an expected call of IncrXX
func (mr *MockScripterMockRecorder) IncrXX(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrXX", reflect.TypeOf((*MockScripter)(nil).IncrXX), key, value)
}

// DecrWithLimit mocks base method
func (m *MockScripter) DecrWithLimit(key string, value, lowerBound int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrWithLimit", key, value, lowerBound)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecrWithLimit indicates an expected call of DecrWithLimit
func (mr *MockScripterMockRecorder) DecrWithLimit(key, value, lowerBound interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrWithLimit", reflect.TypeOf((*MockScripter)(nil).DecrWithLimit), key, value, lowerBound)
}

// HGetSet mocks base method
func (m *MockScripter) HGetSet(key, field, value, prevValue string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HGetSet", key, field, value, prevValue, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// HGetSet indicates an expected call of HGetSet
func (mr *MockScripterMockRecorder) HGetSet(key, field, value, prevValue, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGetSet", reflect.TypeOf((*MockScripter)(nil).HGetSet), key, field, value, prevValue, ttl)
}

// ZAddToFixed mocks base method
func (m *MockScripter) ZAddToFixed(key, member string, score, maxSize int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZAddToFixed", key, member, score, maxSize)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZAddToFixed indicates an expected call of ZAddToFixed
func (mr *MockScripterMockRecorder) ZAddToFixed(key, member, score, maxSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddToFixed", reflect.TypeOf((*MockScripter)(nil).ZAddToFixed), key, member, score, maxSize)
}
