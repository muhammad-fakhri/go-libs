// Code generated by MockGen. DO NOT EDIT.
// Source: storage/init.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	storage "github.com/muhammad-fakhri/go-libs/storage"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Write mocks base method
func (m *MockStorage) Write(filepath string, options ...storage.Option) (io.WriteCloser, error) {
	varargs := []interface{}{filepath}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Write", varargs...)
	ret0, _ := ret[0].(io.WriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockStorageMockRecorder) Write(filepath interface{}, options ...interface{}) *gomock.Call {
	varargs := append([]interface{}{filepath}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockStorage)(nil).Write), varargs...)
}

// Read mocks base method
func (m *MockStorage) Read(filepath string, options ...storage.Option) (io.ReadCloser, error) {
	varargs := []interface{}{filepath}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockStorageMockRecorder) Read(filepath interface{}, options ...interface{}) *gomock.Call {
	varargs := append([]interface{}{filepath}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockStorage)(nil).Read), varargs...)
}

// Close mocks base method
func (m *MockStorage) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockStorageMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorage)(nil).Close))
}

// Exists mocks base method
func (m *MockStorage) Exists(filepath string) bool {
	ret := m.ctrl.Call(m, "Exists", filepath)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists
func (mr *MockStorageMockRecorder) Exists(filepath interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockStorage)(nil).Exists), filepath)
}
