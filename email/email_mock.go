// Code generated by MockGen. DO NOT EDIT.
// Source: email/email.go

// Package email is a generated GoMock package.
package email

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEmail is a mock of Email interface
type MockEmail struct {
	ctrl     *gomock.Controller
	recorder *MockEmailMockRecorder
}

// MockEmailMockRecorder is the mock recorder for MockEmail
type MockEmailMockRecorder struct {
	mock *MockEmail
}

// NewMockEmail creates a new mock instance
func NewMockEmail(ctrl *gomock.Controller) *MockEmail {
	mock := &MockEmail{ctrl: ctrl}
	mock.recorder = &MockEmailMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEmail) EXPECT() *MockEmailMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockEmail) Send(sendEmailTo *MailDetail) error {
	ret := m.ctrl.Call(m, "Send", sendEmailTo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockEmailMockRecorder) Send(sendEmailTo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEmail)(nil).Send), sendEmailTo)
}

// Close mocks base method
func (m *MockEmail) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockEmailMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEmail)(nil).Close))
}
